@page "/users/edit/{UserId}"
@using UserManagement.Contracts.Users
@inject HttpClient Http
@inject NavigationManager NavigationManager

<h3>Edit User</h3>

<EditForm Model="@model" OnValidSubmit="UpdateUser">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group mb-3">
        <label for="forename">Forename:</label>
        <InputText id="forename" class="form-control" @bind-Value="model!.Forename" />
        <ValidationMessage For="@(() => model.Forename)" />
    </div>

    <div class="form-group mb-3">
        <label for="surname">Surname:</label>
        <InputText id="surname" class="form-control" @bind-Value="model!.Surname" />
        <ValidationMessage For="@(() => model.Surname)" />
    </div>

    <div class="form-group mb-3">
        <label for="email">Email:</label>
        <InputText id="email" class="form-control" @bind-Value="model!.Email" />
        <ValidationMessage For="@(() => model.Email)" />
    </div>

    <div class="form-group mb-3">
        <label for="dateOfBirth">Date of Birth:</label>
        <InputDate id="dateOfBirth" class="form-control" @bind-Value="model!.DateOfBirth" />
        <ValidationMessage For="@(() => model.DateOfBirth)" />
    </div>

    <div class="form-check mb-3">
        <InputCheckbox id="isActive" class="form-check-input" @bind-Value="model.IsActive" />
        <label class="form-check-label" for="isActive">Is Active</label>
        <ValidationMessage For="@(() => model.IsActive)" />
    </div>

    <div class="mt-3">
        <button type="submit" class="btn btn-primary">Update User</button>
        <button type="button" class="btn btn-secondary" @onclick="GoBack">Cancel</button>
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-3">
            @errorMessage
        </div>
    }
</EditForm>


@code {
        private UserEditViewModel? model = new();
        private string? errorMessage;

        [Parameter]
        public string? UserId { get; set; }

        protected override async Task OnInitializedAsync()
        {
            if (long.TryParse(UserId, out var userId))
            {
                try
                {
                    var getUserModel = await Http.GetFromJsonAsync<UserListItemViewModel>($"user/details/{userId}");

                    if (getUserModel != null)
                    {
                        model = new UserEditViewModel()
                        {
                            Id = getUserModel.Id,
                            Forename = getUserModel.Forename,
                            Surname = getUserModel.Surname,
                            Email = getUserModel.Email,
                            DateOfBirth = getUserModel.DateOfBirth,
                            IsActive = getUserModel.IsActive
                        };
                    }
                    else
                    {
                        errorMessage = "User not found.";
                    }
                }
                catch (Exception ex)
                {
                    errorMessage = $"Error fetching user data: {ex.Message}";
                }
            }
            else
            {
                errorMessage = "Invalid User ID.";
            }
        }

        private async Task UpdateUser()
        {
            try
            {
                var response = await Http.PutAsJsonAsync($"user/update/{model!.Id}", model);
                if (response.IsSuccessStatusCode)
                {
                    NavigationManager.NavigateTo("/users/list");
                }
                else
                {
                    errorMessage = "Failed to update user.";
                }
            }
            catch (Exception ex)
            {
                errorMessage = $"Error updating user: {ex.Message}";
            }
        }

        private void GoBack()
        {
            NavigationManager.NavigateTo($"/users/list");
        }
    }
